#!/usr/bin/env node

'use strict';

var Gcomp = require('../src/gcomp.js');
var version = require('../package.json').version;

var fs = require('fs');
var path = require('path');
var exec = require('child_process').exec;
var os = require('os');

var options = {};


var help = function () {
    var message = [
        '\x1B[7mGcomp - Template Compiler\x1B[27m',
        '',
        'Usage',
        '    gcomp <path> [options]',
        '',
        'Options',
        [
            '    -d, --debug  Debugging Template',
            '         --type  Optional: default | cmd (RequireJS/SeaJS) | amd (RequireJS) |',
            '                 commonjs (NodeJS)',
            ' --output value  Defining an output directory',
            '--charset value  Charset, "utf-8" by default',
            '     --no-watch  Does not monitor template directory',
            '      --version  Print the gcomp version',
            '        --help   Display this help text'
        ].join('\n'),
        '',
        '\x1B[90m' + 'Documentation can be found at https://github.com/HerbertKarajan/gcomp' + '\x1B[39m'
    ];

    message = message.join('\n');
    process.stdout.write(message + '\n');
};



var base;
var value;
var userConfig;
var isWatch = true;
var isEditConfig = false;
var args = process.argv.slice(2);


if (args[0] && /^[^-]|\//.test(args[0])) {
    base = args.shift();
}


while (args.length > 0) {
    value = args.shift();
    switch (value) {

        // 监控修改
        case '-w':
        case '--watch':
            isWatch = true;
            break;

        case '--no-watch':
            isWatch = false;
            break;

        // 调试模式
        case '-d':
        case '--debug':
            options.debug = true;
            break;

        case '--no-debug':
            options.debug = false;
            break;

        // 对输出值编码
        case '--escape':
            options.escape = true;
            break;

        case '--no-escape':
            options.escape = false;
            break;

        // 打包合并
        case '--combo':
            options.combo = true;
            break;

        case '--no-combo':
            options.combo = false;
            break;

        // 压缩代码
        case '--minify':
            options.minify = true;
            break;

        case '--no-minify':
            options.minify = false;
            break;

        // 使用缓存
        case '--cache':
            options.cache = true;
            break;
        case '--no-cache':
            options.cache = false;
            break;

        // 输出目录
        case '--output':
            options.output = args.shift();
            break;

        // 模板输出类型
        case '--type':
            options.type = args.shift();
            break;

        // 模板编码
        case '--charset':
            options.charset = args.shift();
            break;

         // 模板语法
        case '--syntax':
            options.syntax = args.shift();
            break;

        // 辅助方法路径
        case '--helpers':
            options.helpers = args.shift();
            break;

        case '--config':
            isEditConfig = true;
            break;

        // 显示帮助
        case '-h':
        case '--help':
            help();
            process.exit();
            break;

        // 版本号
        case '-v':
        case '--version':
            process.stdout.write(version + '\n');
            process.exit();
            break;

        default:

            if (!base) {
                base = value;
            }
    }
}


if (!base) {
    base = './';
}


if (!fs.existsSync(base)) {
    process.stdout.write('Error: directory does not exist\n');
    process.exit(1);
}


var gcomp = new Gcomp(base, options);


gcomp.on('compileError', function (data) {
    if (!isWatch) {
        process.exit(1);
    }
});


userConfig = gcomp.saveConfig();


if (isEditConfig) {
    
    process.stdout.write('Open: ' + userConfig + '\n');

    exec(
        (/windows/i.test(os.type()) ? 'start' : 'open')
        + ' ' + userConfig, {timeout: 0}, function () {}
    );


} else {

    gcomp.compile();

    if (isWatch) {
        gcomp.watch();
    }
    
}
